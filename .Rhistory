a_initial <- coef(linear_model)[2]
d_initial <- coef(linear_model)[1]
if(abs(a_initial) < 1e-3) a_initial <- a_initial + sign(a_initial)*0.05
list(a = a_initial, d = d_initial)
}
}
TSstart_parameters_v1 <- function(dat, plus = FALSE) {
if(plus == FALSE){
linear_model = lm(degree ~ sqrt(t)-1, dat)
a_initial <- coef(linear_model)[1]
if(abs(a_initial) < 1e-3) a_initial <- a_initial + sign(a_initial)*0.05
list(a = a_initial)
} else{
linear_model = lm(degree ~ sqrt(t), dat)
a_initial <- coef(linear_model)[2]
d_initial <- coef(linear_model)[1]
if(abs(a_initial) < 1e-3) a_initial <- a_initial + sign(a_initial)*0.05
list(a = a_initial, d = d_initial)
}
}
TSstart_parameters_v2 <- function(dat, plus = FALSE) {
if(plus == FALSE){
linear_model = lm(log(degree) ~ log(t), dat)
a_initial = exp(coef(linear_model)[1])
b_initial = coef(linear_model)[2]
if(abs(b_initial) < 1e-3) b_initial <- b_initial + sign(b_initial)*0.5
list(a = a_initial, b = b_initial)
} else{
linear_model = lm(log(degree) ~ log(t), dat)
a_initial = exp(coef(linear_model)[1])
b_initial = coef(linear_model)[2]
if(abs(b_initial) < 1e-3) b_initial <- b_initial + sign(b_initial)*0.5
list(a = a_initial, b = b_initial, d = 0)
}
}
TSstart_parameters_v3 <- function(dat, plus = FALSE) {
if(plus == FALSE){
linear_model = lm(log(degree) ~ t, dat)
a_initial = exp(coef(linear_model)[1])
c_initial = coef(linear_model)[2]
if(abs(c_initial) < 1e-3) c_initial <- c_initial + sign(c_initial)*0.005
list(a = a_initial, c = c_initial)
} else{
linear_model = lm(log(degree) ~ t, dat)
a_initial = exp(coef(linear_model)[1])
c_initial = coef(linear_model)[2]
if(abs(c_initial) < 1e-3) c_initial <- c_initial + sign(c_initial)*0.005
list(a = a_initial, c = c_initial, d = 0)
}
}
TSstart_parameters_v4 <- function(dat, plus = FALSE) {
if(plus == FALSE){
linear_model = lm(degree ~ log(t)-1, dat)
a_initial <- unname(coef(linear_model)[1])
if(abs(a_initial) < 1e-3) a_initial <- a_initial + sign(a_initial)*0.05
list(a = a_initial, d1 = 0)
} else{
linear_model = lm(degree ~ log(t), dat)
a_initial <- unname(coef(linear_model)[2])
d2_initial <- coef(linear_model)[1]
if(abs(a_initial) < 1e-3) a_initial <- a_initial + sign(a_initial)*0.5
list(a = a_initial, d1 = 0, d2 = d2_initial)
}
}
TSstart_parameters <- function(dat,i){
if (i==1) return(TSstart_parameters_v0(dat))                      # Model 0
if (i==2) return(TSstart_parameters_v1(dat))                      # Model 1
if (i==3) return(TSstart_parameters_v2(dat))                      # Model 2
if (i==4) return(TSstart_parameters_v3(dat))                      # Model 3
if (i==5) return(TSstart_parameters_v4(dat))                      # Model 4
if (i==6) return(TSstart_parameters_v0(dat, T))                       # Model 0+
if (i==7) return(TSstart_parameters_v1(dat, T))                       # Model 1+
if (i==8) return(TSstart_parameters_v2(dat, T))                       # Model 2+
if(i==9)  return(TSstart_parameters_v3(dat, T))                       # Model 3+
if(i==10) return(TSstart_parameters_v4(dat, T))                       # Model 4+
}
# Calculate optimal parameters nls
solveAllModels <- function(data) {
lapply(1:length(TSmodels), function(i) {
print(paste("Computing model", i))
if(TSnum_params[i] > 0) {
nls(formula = TSmodels[[i]],
data = data,
start = TSstart_parameters(data,i),
control = nls.control(maxiter = 3000, tol = 1e-05, warnOnly=T)
#algorithm = "Gauss-Newton",
#lower = lower_bounds[[i]](stats),
#upper = upper_bounds[[i]](stats)
)
}
})
}
# Calculate optimal parameters with nlsLM (a different package)
solveAllModels2 <- function(data) {
lapply(1:length(TSmodels), function(i) {
print(paste("Computing model", i))
if(TSnum_params[i] > 0) {
try(nlsLM(formula = TSmodels[[i]],
data = data,
start = TSstart_parameters(data,i)
#algorithm = "Gauss-Newton",
#lower = lower_bounds[[i]](stats),
#upper = upper_bounds[[i]](stats)
))
}
})
}
# Solve for each vertex
solve1Version <- function(version){
lapply(arrivalTimes, function(x) solveAllModels2(degreeOverTime[[version]][degreeOverTime[[version]]$ti==x,]))
}
nls_results <- lapply(versions, solve1Version)
names(nls_results) <- versions
nls_results2 <- lapply(versions, function(x) solveAllModels2(degreeOverTime[[x]]))
names(nls_results2) <- versions
# Get AICs for each vertex
table2 <- data.frame(expand.grid(versions,arrivalTimes))
table2 <- table2[order(table2$Var1),]
table2 <- cbind(table2, matrix(NA, nrow = nrow(table2), ncol = length(TSmodels)))
names(table2) <- c("Version", "ArrivalTime", TSmodel_names)
for(v in 1:length(versions)){
for(a in 1:length(arrivalTimes)){
for(i in 1:length(TSmodels)){
table2[table2$Version==versions[v] & table2$ArrivalTime == arrivalTimes[a], TSmodel_names[i]] <- AIC(nls_results[[v]][[a]][[i]])
}
}
}
# AIC difference
table2Dif <- table2
table2Dif[,TSmodel_names] <- table2Dif[,TSmodel_names]-apply(table2Dif[,TSmodel_names], 1, min)
# Get AICs for combined
table2 <- matrix(NA, nrow = length(versions), ncol = length(TSmodels))
colnames(table2) <-  TSmodel_names
for(v in 1:length(versions)){
for(i in 1:length(TSmodels)){
table2[v, TSmodel_names[i]] <- AIC(nls_results2[[v]][[i]])
}
}
# AIC difference
table2DifAll <- table2
table2DifAll[,TSmodel_names] <- table2DifAll[,TSmodel_names]-apply(table2DifAll[,TSmodel_names], 1, min)
rownames(table2DifAll) <- versions
# Evolution plots + theoretical curve
plotEvolutions <- function(version){
m <- m0[version]
n <- n0[version]
theoreticalCurves <- list(
BA = function(x)m * sqrt(x),
BA_RA = function(x) m*log(m+x-1),
BA_NG = function(x) 2*m*x/n
)
ggplot(degreeOverTime[[version]], aes(x = t, y = degree)) +
geom_line(aes(color = as.factor(ti)), size = 1) +
theme_minimal() + labs(color = "Arrival time") +
labs(color = NULL, y = "Scaled degree", x = "Time step") +
stat_function(fun=theoreticalCurves[[version]], geom="line", mapping = aes(color = "Theoretical")) +
scale_color_manual(values = c(2,3,4,5,1),
labels=c(paste("AT", arrivalTimes), "Theoretical curve"))
}
# Evolution plots + theoretical curve
plotEvolutions2 <- function(version){
m <- m0[version]
n <- n0[version]
theoreticalCurves <- list(
BA = function(x) 3.0125*x^0.6108+66.5658,
BA_RA = function(x) 10.1164*log(x+79.9676)-0.7215,
BA_NG = function(x) 0.02185*x^0.99101+ 4.03398
)
ggplot(degreeOverTime[[version]], aes(x = t, y = degree)) +
geom_line(aes(color = as.factor(ti)), size = 1) +
theme_minimal() + labs(color = "Arrival time") +
labs(color = NULL, y = "Scaled degree", x = "Time step") +
stat_function(fun=theoreticalCurves[[version]], geom="line", mapping = aes(color = "Fitted")) +
scale_color_manual(values = c(2,3,4,5,1),
labels=c(paste("AT", arrivalTimes), "Fitted curve"))
}
# Table 3
# get_paramsTS <- function(version){
#   do.call(c,lapply(1:length(TSmodels), function(x) coefficients(nls_results[[version]][[x]])))
# }
# TS_params <- do.call(rbind, lapply(names(versions), function(x) get_paramsTS(x)))
# rownames(TS_params) <- names(ts)
DDmodel_names <- c('DisplacedPoisson', 'DisplacedGeometric', 'RestrictedZeta', 'Zeta', 'RightTZeta', 'Altmann', 'RightTExponential')
DDnum_params <- c(1, 1, 0, 1, 2, 2, 1)
x <- numeric()
computeMinusLogLik <- list(
DisplacedPoisson = function(lambda) {
C <- sum(sapply(x, function(y) sum(log(2:y))))
return(-sum(x) * log(lambda) + length(x) * (lambda + log(1 - exp(-lambda))) + C)
},
DisplacedGeometric = function(q) -(sum(x)-length(x)) * log(1-q) - length(x) * log(q),
RestrictedZeta = function() {
M <- sum(log(x))
return(3 * M + length(x) * log(zeta(3, deriv = 0)))
},
Zeta = function(gamma) {
M <- sum(log(x))
return(gamma * M + length(x) * log(zeta(gamma, deriv = 0)))
},
RightTZeta = function(gamma, kmax) {
M <- sum(log(x))
return(gamma * M + length(x) * log(sum((1:kmax)^(-gamma))))
},
Altmann = function(gamma, delta) {
cinv <- sum(sapply(1:length(x),function(k) k^(-gamma)*exp(-delta*k)))
return(delta * sum(x) + gamma * sum(log(x)) + length(x) * log(cinv))
},
RightTExponential = function(c){
C <- (1-exp(-c))/(exp(-c)*(1-exp(-c*length(x))))
return(c*sum(x)-length(x)*log(C))
}
)
computeProbability <- list(
DisplacedPoisson   = function(x, lambda) lambda^x*exp(-lambda)/(factorial(x)*(1-exp(-lambda))),
DisplacedGeometric = function(x, q) (1-q)^(x-1)*q,
RestrictedZeta     = function(x) x^(-3)/zeta(3, deriv = 0),
Zeta               = function(x, gamma) x^(-gamma)/zeta(gamma, deriv = 0),
RightTZeta         = function(x, gamma, kmax) x^(-gamma)/sum((1:kmax)^(-gamma)),
Altmann            = function(x, gamma, delta){
cinv <- sum(sapply(1:length(x), function(k) k^(-gamma) * exp(-delta*k)))
x^(-gamma)*exp(-delta*x)/cinv
},
RightTExponential  = function(x, c){
C <- (1-exp(-c))/(exp(-c)*(1-exp(-c*length(x))))
C*exp(-c*x)
}
)
startParameters <- function(x){
list(
startDP = list(lambda = 1),
startDG = list(q = 1),
startRZ = NULL,
startZ  = list(gamma = 3),
startRTZ= list(gamma = 0.05, kmax = max(x)),
startMA  = list(gamma = 1, delta = 0),
startRTE = list(c = 1)
)
}
bounds <- function(x){
list(
boundsDP = list(lower = 1e-7, upper = NA),
boundsDG = list(lower = 1e-7, upper = 1-1e-7),
boundsRZ = list(lower = NA, upper = NA),
boundsZ  = list(lower = 1+1e-7, upper = NA),
boundsRTZ= list(lower = c(1, max(x)), upper = NA),
boundsMA = list(lower = c(0,0.00001), upper = NA),
boundsRTE= list(lower = 0.0001, upper = 10)
)
}
NModels <- length(computeMinusLogLik)
calculateMLE <- function(version){
x <<- degreeDistributions[[version]]
res <- lapply(1:NModels, function(i) {
print(paste("Computing model", names(computeMinusLogLik)[i]))
if(DDnum_params[i] > 0) {
mle(minuslogl = computeMinusLogLik[[i]],
start = startParameters(x)[[i]],
method = "L-BFGS-B",
lower = bounds(x)[[i]]$lower,
upper = bounds(x)[[i]]$upper)
} else NULL
})#lapply
names(res) <- names(computeMinusLogLik)
return(res)
}
# Plot fitted vs real
visualizeDDFit <- function(version, whichModels = 1:length(mle_models[[version]])){
for(i in whichModels){
# Get parameters
if(DDnum_params[i] > 0){
opt_params <- coef(mle_models[[version]][[i]])
} else{
opt_params <- NULL
}
# Get data
degrees <- degreeDistributions[[version]]
degree_spectrum <- table(degrees)
counts <- unname(degree_spectrum)
spectrum <- as.numeric(names(degree_spectrum))
# Plot
plot(spectrum, counts, log = "xy", ylim = c(1, tmax), col=viridis(length(spectrum)))
axis(2, at=10^(1:10))
lines(spectrum,
length(degrees)*sapply(spectrum, function(z) do.call(computeProbability[[i]], as.list(c(x=z, opt_params)))),
col = "darkorchid", lwd=3)
legend('topright', legend=parse(text=names(mle_models[[version]])[i]), col='darkorchid', lwd=3)
}
}
# Sample size corrected AIC function
get_AIC <- function(m2logL,K,N) {
m2logL + 2*K*N/(N-K-1)
}
# AIC function
computeAICs <- function(models, N){
sapply(1:length(models), function(i){
if(is.null(models[[i]])){
m2LL <- 2*computeMinusLogLik[[i]]()
} else{
m2LL <- attributes(summary(models[[i]]))$m2logL
}
get_AIC(m2LL, DDnum_params[i], N)
})
}
mle_models <- list()
for (version in names(degreeDistributions)){
print(version)
if(!is.null(degreeDistributions[[version]])) mle_models[[version]] <- calculateMLE(version)
}
# Compute AIC
AICs <- do.call(rbind, lapply(names(degreeDistributions), function(v) computeAICs(mle_models[[v]], length(degreeDistributions[[v]]))))
# Set names
colnames(AICs) <- DDmodel_names
rownames(AICs) <- names(versions)
# Compute AIC difference
dAICs <- AICs - apply(AICs, 1, min)
DDresults <- list(aic=as.data.frame(AICs), delta=as.data.frame(dAICs))
kable(data.frame(Version = names(versions), m0 = m0, n0 = n0, Initial_Conf = c("Ring", "Ring", "Ring")), row.names = F, align = "c", caption = paste("Initial settings for the simulation algorithm"))
plotEvolutions("BA")
plotEvolutions("BA_RA")
plotEvolutions("BA_NG")
table2Dif[,3:ncol(table2Dif)] <- round(table2Dif[,3:ncol(table2Dif)], 1)
# print(kable(table2Dif, align = "c", caption = paste("AIC difference results for the time series models fitting the models separately for each chosen vertex")) %>%
#   kable_styling(latex_options = c("striped", "hold_position")))
# print(kable(table2DifAll, align = "c", caption = paste("AIC difference results for the time series models fitting the models separately for each chosen vertex")) %>%
#   kable_styling(latex_options = c("striped", "hold_position")))
print(kable(table2Dif[,1:7], align = "c", caption = paste("AIC difference results for the time series data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
print(kable(table2Dif[,c(1:2,8:ncol(table2Dif))], align = "c", caption = paste("AIC difference results for the time series data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
plotEvolutions2("BA")
plotEvolutions2("BA_RA")
plotEvolutions2("BA_NG")
# Table AIC diff
print(kable(round(DDresults$delta[,1:7],digits = 2), align = "c", caption = paste("AIC difference results for the degree distribution data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
print(kable(round(DDresults$delta[,c(1:2, 8:ncol(table2Dif))],digits = 2), align = "c", caption = paste("AIC difference results for the degree distribution data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
# Table AIC diff
print(kable(round(DDresults$delta[,1:7],digits = 2), align = "c", caption = paste("AIC difference results for the degree distribution data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
print(kable(round(DDresults$delta[,c(1:2, 8:ncol(DDresults$delta))],digits = 2), align = "c", caption = paste("AIC difference results for the degree distribution data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
# Table AIC diff
print(kable(round(DDresults$delta[,1:4],digits = 2), align = "c", caption = paste("AIC difference results for the degree distribution data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
print(kable(round(DDresults$delta[,c(1:2, 8:ncol(DDresults$delta))],digits = 2), align = "c", caption = paste("AIC difference results for the degree distribution data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
# Table AIC diff
print(kable(round(DDresults$delta[,1:4],digits = 2), align = "c", caption = paste("AIC difference results for the degree distribution data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
print(kable(round(DDresults$delta[,c(1:2, 4:ncol(DDresults$delta))],digits = 2), align = "c", caption = paste("AIC difference results for the degree distribution data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
# Table AIC diff
print(kable(round(DDresults$delta[,1:4],digits = 2), align = "c", caption = paste("AIC difference results for the degree distribution data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
print(kable(round(DDresults$delta[,c(1, 4:ncol(DDresults$delta))],digits = 2), align = "c", caption = paste("AIC difference results for the degree distribution data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
# Table AIC diff
print(kable(round(DDresults$delta[,1:4],digits = 2), align = "c", caption = paste("AIC difference results for the degree distribution data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
print(kable(round(DDresults$delta[,c(1, 5:ncol(DDresults$delta))],digits = 2), align = "c", caption = paste("AIC difference results for the degree distribution data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
# Table AIC diff
print(kable(round(DDresults$delta[,1:4],digits = 2), align = "c", caption = paste("AIC difference results for the degree distribution data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
print(kable(round(DDresults$delta[,5:ncol(DDresults$delta)],digits = 2), align = "c", caption = paste("AIC difference results for the degree distribution data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
table2Dif[,3:ncol(table2Dif)] <- round(table2Dif[,3:ncol(table2Dif)], 1)
# print(kable(table2Dif, align = "c", caption = paste("AIC difference results for the time series models fitting the models separately for each chosen vertex")) %>%
#   kable_styling(latex_options = c("striped", "hold_position")))
# print(kable(table2DifAll, align = "c", caption = paste("AIC difference results for the time series models fitting the models separately for each chosen vertex")) %>%
#   kable_styling(latex_options = c("striped", "hold_position")))
print(kable(table2Dif[,1:7], align = "c", caption = paste("AIC difference results for the time series data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
print(kable(table2Dif[,c(1:2,8:ncol(table2Dif))], align = "c", caption = paste("AIC difference results for the time series data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
print(kable(table2DifAll[,1:7], align = "c", caption = paste("AIC difference results for the time series data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
print(kable(table2DifAll[,c(1:2,8:ncol(table2Dif))], align = "c", caption = paste("AIC difference results for the time series data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
table2Dif[,3:ncol(table2Dif)] <- round(table2Dif[,3:ncol(table2Dif)], 1)
# print(kable(table2Dif, align = "c", caption = paste("AIC difference results for the time series models fitting the models separately for each chosen vertex")) %>%
#   kable_styling(latex_options = c("striped", "hold_position")))
# print(kable(table2DifAll, align = "c", caption = paste("AIC difference results for the time series models fitting the models separately for each chosen vertex")) %>%
#   kable_styling(latex_options = c("striped", "hold_position")))
print(kable(table2Dif[,1:7], align = "c", caption = paste("AIC difference results for the time series data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
print(kable(table2Dif[,c(1:2,8:ncol(table2Dif))], align = "c", caption = paste("AIC difference results for the time series data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
print(kable(table2DifAll[,1:7], align = "c", caption = paste("AIC difference results for the time series data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
print(kable(table2DifAll[,c(1:2,8:ncol(table2DifAll))], align = "c", caption = paste("AIC difference results for the time series data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
print(kable(table2DifAll[,1:5], align = "c", caption = paste("AIC difference results for the time series data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
table2Dif[,3:ncol(table2Dif)] <- round(table2Dif[,3:ncol(table2Dif)], 1)
# print(kable(table2Dif, align = "c", caption = paste("AIC difference results for the time series models fitting the models separately for each chosen vertex")) %>%
#   kable_styling(latex_options = c("striped", "hold_position")))
# print(kable(table2DifAll, align = "c", caption = paste("AIC difference results for the time series models fitting the models separately for each chosen vertex")) %>%
#   kable_styling(latex_options = c("striped", "hold_position")))
print(kable(table2Dif[,1:7], align = "c", caption = paste("AIC difference results for the time series data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
print(kable(table2Dif[,c(1:2,8:ncol(table2Dif))], align = "c", caption = paste("AIC difference results for the time series data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
print(kable(table2DifAll[,1:5], align = "c", caption = paste("AIC difference results for the time series data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
print(kable(table2DifAll[,c(1:2,6:ncol(table2DifAll))], align = "c", caption = paste("AIC difference results for the time series data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
print(kable(table2DifAll[,1:5], align = "c", caption = paste("AIC difference results for the time series data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
table2Dif[,3:ncol(table2Dif)] <- round(table2Dif[,3:ncol(table2Dif)], 1)
# print(kable(table2Dif, align = "c", caption = paste("AIC difference results for the time series models fitting the models separately for each chosen vertex")) %>%
#   kable_styling(latex_options = c("striped", "hold_position")))
# print(kable(table2DifAll, align = "c", caption = paste("AIC difference results for the time series models fitting the models separately for each chosen vertex")) %>%
#   kable_styling(latex_options = c("striped", "hold_position")))
print(kable(table2Dif[,1:7], align = "c", caption = paste("AIC difference results for the time series data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
print(kable(table2Dif[,c(1:2,8:ncol(table2Dif))], align = "c", caption = paste("AIC difference results for the time series data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
print(kable(table2DifAll[,1:5], align = "c", caption = paste("AIC difference results for the time series data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
print(kable(table2DifAll[,6:ncol(table2DifAll)], align = "c", caption = paste("AIC difference results for the time series data")) %>%
kable_styling(latex_options = c("striped", "hold_position")))
initDict()
library(wordnet)
initDict()
getDict()
if(initDict()) {
filter <- getTermFilter("StartsWithFilter", "car", TRUE)
getIndexTerms("NOUN", 5, filter)
}
getIndexTerms("NOUN", 10, filter)
if(initDict()) {
filter <- getTermFilter("StartsWithFilter", "car", TRUE)
terms <- getIndexTerms("NOUN", 5, filter)
sapply(terms, getLemma)
}
# get related synsets
synsets <- getSynsets(terms[[1]])
related <- getRelatedSynsets(synsets[[1]], "!")
sapply(related, getWord)
if(initDict()) {
# get related terms
filter <- getTermFilter("StartsWithFilter", "car", TRUE)
terms <- getIndexTerms("NOUN", 5, filter)
sapply(terms, getLemma)
# get related synsets
synsets <- getSynsets(terms[[1]])
related <- getRelatedSynsets(synsets[[1]], "!")
sapply(related, getWord)
}
# get related synsets
synsets <- getSynsets(terms[[1]])
related <- getRelatedSynsets(synsets[[1]], "!")
if(initDict()) {
# get related terms
filter <- getTermFilter("StartsWithFilter", "car", TRUE)
terms <- getIndexTerms("NOUN", 5, filter)
sapply(terms, getLemma)
# get synonims
filter <- getTermFilter("ExactMatchFilter", "hot", TRUE)
terms <- getIndexTerms("ADJECTIVE", 5, filter)
synsets <- getSynsets(terms[[1]])
related <- getRelatedSynsets(synsets[[1]], "!")
sapply(related, getWord)
}
setwd("~/Projects/Uni/CSN/Semi-Supervised-Polarity-Lexicon-Induction")
load(file = "./LMDict/LMDpositive.rda")
# get related terms
filter <- getTermFilter("ExactMatchFilter", "ABLE", TRUE)
library(wordnet)
load(file = "./LMDict/LMDpositive.rda")
if(initDict()) {
# get related terms
filter <- getTermFilter("ExactMatchFilter", "ABLE", TRUE)
terms <- getIndexTerms("NOUN", 5, filter)
sapply(terms, getLemma)
# get antonym
filter <- getTermFilter("ExactMatchFilter", "hot", TRUE)
terms <- getIndexTerms("ADJECTIVE", 5, filter)
synsets <- getSynsets(terms[[1]])
# this gets synonymous
related <- getRelatedSynsets(synsets[[1]], "!")
sapply(related, getWord)
}
terms <- getIndexTerms("NOUN", 5, filter)
sapply(terms, getLemma)
terms <- getIndexTerms("ADJECTIVE", 5, filter)
sapply(terms, getLemma)
# get related terms
filter <- getTermFilter("ExactMatchFilter", "ABLE", TRUE)
terms <- getIndexTerms("ADJECTIVE", 5, filter)
sapply(terms, getLemma)
terms <- getIndexTerms("ADJECTIVE", 5, "filter", "ABLE")
load(file = "./LMDict/LMDpositive.rda")
write.csv(LMDpositive)
write.csv(LMDpositive, "./LMDictCsv/LMDpositive.csv")
write.csv(LMDpositive, file = "./LMDictCsv/LMDpositive.csv")
write.csv(LMDpositive, file = "./LMDictCsv/LMDpositive.csv")
load(file = "./LMDict/LMDnegative.rda")
write.csv(LMDpositive, file = "./LMDictCsv/LMDnegative.csv")
load(file = "./LMDict/LMDconstraining.rda")
write.csv(LMDpositive, file = "./LMDictCsv/LMDconstraining.csv")
write.csv(LMDpositive, file = "./LMDictCsv/LMDlitigious.csv")
load(file = "./LMDict/LMDlitigious.rda")
write.csv(LMDpositive, file = "./LMDictCsv/LMDlitigious.csv")
load(file = "./LMDict/LMDmodals.rda")
write.csv(LMDpositive, file = "./LMDictCsv/LMDmodals.csv")
load(file = "./LMDict/LMDsuperfluous.rda")
write.csv(LMDpositive, file = "./LMDictCsv/LMDsuperfluous.csv")
load(file = "./LMDict/LMDuncertainty.rda")
write.csv(LMDpositive, file = "./LMDictCsv/LMDuncertainty.csv")
